#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    _httpWidget = new httpconnect(this);
    _serialWidget = new SerialConnect(this);

    _fpsTimer = new QTimer();

    _fpsTimer->start(1000);
    connect(_fpsTimer, &QTimer::timeout, this, [=](){
        _fpsValue = _fpsCount ;
        _fpsCount = 0;
    });

    ui->le_timer->setValidator(new QIntValidator(0, 86400, this));

    connect( _httpWidget,&httpconnect::sendImage,this,[=](QImage image){
        _imagefullSize = QPixmap::fromImage(image);
        QImage imagedraw = image.scaled(ui->Lab_Image->width(),ui->Lab_Image->height(),Qt::KeepAspectRatio, Qt::SmoothTransformation);
        ui->lab_fps->setText(QString("%1x%2 FPS:%3")
                             .arg(image.width())
                             .arg(image.height())
                             .arg(_fpsValue));
        //ui->Lab_Image
        _image = QPixmap::fromImage(imagedraw);
        ui->Lab_Image->setPixmap(_image);
        _fpsCount ++;
    },Qt::AutoConnection);

    connect( _serialWidget,&SerialConnect::sendImage,this,[=](QImage image){
        _imagefullSize = QPixmap::fromImage(image);
        QImage imagedraw = image.scaled(ui->Lab_Image->width(),ui->Lab_Image->height(),Qt::KeepAspectRatio, Qt::SmoothTransformation);
        ui->lab_fps->setText(QString("%1x%2 FPS:%3")
                             .arg(image.width())
                             .arg(image.height())
                             .arg(_fpsValue));
        //ui->Lab_Image
        _image = QPixmap::fromImage(imagedraw);
        ui->Lab_Image->setPixmap(_image);
        _fpsCount ++;
    },Qt::AutoConnection);

    connect( _serialWidget,&SerialConnect::sendArray,this,&MainWindow::anaCMDData);
    connect( _httpWidget,&httpconnect::sendArray,this,&MainWindow::anaCMDData);

    QString pathstr = QCoreApplication::applicationDirPath();
    QDir imageDir(pathstr);
    if( !imageDir.exists("image"))
    {
        imageDir.mkdir("image");
    }
    imageDir.cd("image");
    _savePath = imageDir.path();
    ui->le_SavePath->setText(_savePath);

    ui->tw_connect->clear();
    ui->tw_connect->addTab(_serialWidget,"SERIAL");
    ui->tw_connect->addTab(_httpWidget,"HTTP");

    QListWidget *listSetial = new QListWidget(this);
    listSetial->setItemDelegate(new NoFocusFrameDelegate(this));

    ui->cb_FrameSize->setModel(listSetial->model());
    ui->cb_FrameSize->setView(listSetial);

    ui->cb_FrameSize->addItem("UXGA(1600x1200)" ,13);
    ui->cb_FrameSize->addItem("SXGA(1280x1024)" ,12);
    ui->cb_FrameSize->addItem("XGA(1024x768)"   ,10);
    ui->cb_FrameSize->addItem("SVGA(800x600)"   ,9);
    ui->cb_FrameSize->addItem("VGA(640x480)"    ,8);
    ui->cb_FrameSize->addItem("CIF(400x296)"    ,6);
    ui->cb_FrameSize->addItem("QVGA(320x240)"   ,5);
    ui->cb_FrameSize->addItem("HQVGA(240x176)"  ,3);
    ui->cb_FrameSize->addItem("QQVGA(160x120)"  ,1);

    QListWidget *listSetial_connect = new QListWidget(this);
    listSetial_connect->setItemDelegate(new NoFocusFrameDelegate(this));
    ui->cb_connectMode->setModel(listSetial_connect->model());
    ui->cb_connectMode->setView(listSetial_connect);

    ui->cb_connectMode->addItem(QIcon(":/icon/icon/wifi.png"), "Wifi-Http", 0);
    ui->cb_connectMode->addItem(QIcon(":/icon/icon/USB.png"), "Serial", 1);

    //ui->cb_connectMode->addItem(QIcon(":/icon/icon/timer_icon.png"), "Timer", 2);

    btnMap.insert(8,ui->bn_AWB);
    btnMap.insert(10,ui->bn_AECDsp);
    btnMap.insert(9,ui->bn_AGC);
    btnMap.insert(11,ui->bn_HMirror);
    btnMap.insert(12,ui->bn_VFlip);
    btnConnect();

    ui->listWidget->clear();
    ui->listWidget->setIconSize(QSize(50,50));
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::sendCmdToDevicd(quint8 cmd, qint16 data,quint16 retry)
{
    _serialWidget->sendCMD(cmd,data,retry);
    _httpWidget->sendCMD(cmd,data);
}

void MainWindow::btnConnect()
{
    QList<quint8> keys = btnMap.keys();
    foreach( quint8 key, keys )
    {
        qInfo("set cmd %d ",key);
        btnMap[key]->setCmd(key);
        connect(btnMap[key],&clickBtn::clickedCmd,this,&MainWindow::sendBtnCmdState);
    }
}

void MainWindow::sendBtnCmdState(quint8 cmd,bool state)
{
    if( state )
    {
        sendCmdToDevicd(cmd,0x01);
        qInfo("send cmd %d - true",cmd);
    }
    else
    {
        sendCmdToDevicd(cmd,0x00);
        qInfo("send cmd %d - false",cmd);
    }
}

void MainWindow::anaCMDData(quint8 cmd,QByteArray dataArray)
{
    switch(cmd)
    {
        case 27:
            qDebug()<<"Device Mode"<<dataArray;
            //ui->cb_connectMode->setCurrentIndex(1);
            ui->cb_connectMode->setCurrentIndex(dataArray.at(0));
            this->update();
        break;
        case 29:
            setConfigFromDataArray(dataArray);
        break;
        case 32:
            qDebug()<<"WIFI SSID"<<dataArray;
        break;
        case 33:
            {
            qInfo("IP:%d.%d.%d.%d",
                  quint8(dataArray.at(0)),
                  quint8(dataArray.at(1)),
                  quint8(dataArray.at(2)),
                  quint8(dataArray.at(3)));

            QString ipstr = QString("%1.%2.%3.%4")
                            .arg(quint8(dataArray.at(0)))
                            .arg(quint8(dataArray.at(1)))
                            .arg(quint8(dataArray.at(2)))
                            .arg(quint8(dataArray.at(3)));
            IPDialog *ipmsg = new IPDialog();
            ipmsg->ip(ipstr);
            }
        break;
        case 34:
            qDebug()<<dataArray;
            if( dataArray.at(0) == 2 )
            {
                qDebug()<<"connect Successful";
                _serialWidget->sendCMD(33,1);
            }
        break;
    }
}

void MainWindow::setConfigFromDataArray(QByteArray data)
{
    if( data.size() == 50)
    {
        qDebug()<<"setConfigFromDataArray";

        for( int i = 0; i < 25; i++ )
        {
            qint16 data16 = data.at( i * 2 + 1 ) & 0xff;
            data16 <<= 8;
            data16 |=  data.at( i * 2 );
            bool state = ( data16 == 0x01 ) ? true : false;

            switch( i )
            {
                case 1: ui->cb_FrameSize->setCurrentIndex(ui->cb_FrameSize->findData(data16)); break;
                case 2: ui->hs_Quality->setValue(data16);   break;
                case 3: ui->hs_Contrast->setValue(data16);  break;
                case 4: ui->hs_Brightness->setValue(data16);break;
                case 5: ui->hs_Saturation->setValue(data16);break;
                case 8: ui->bn_AWB->setCheckedp(state);      break;
                case 9: ui->bn_AGC->setCheckedp(state);      break;
                case 10:break;
                case 11: ui->bn_HMirror->setCheckedp(state); break;
                case 12: ui->bn_VFlip->setCheckedp(state);   break;
                case 14: ui->bn_AGC->setCheckedp(state);     break;
                case 24: ui->hs_AELevel->setValue(data16);  break;
            }
        }
    }
}

void MainWindow::saveImage(QPixmap image ,QDateTime time)
{
    QString imagepath = _savePath+"/"+time.toString("yyyy_MM_dd_hh_mm_ss_zzz")+".jpg";
    qDebug()<<imagepath;
    image.save(imagepath);
}

void MainWindow::mousePressEvent(QMouseEvent* e)
{
    QPoint PressPoint;

    if( e->button() == Qt::LeftButton )
    {
        PressPoint = this->mapFromGlobal(QCursor::pos());
        if( ui->lab_title->geometry().contains(PressPoint))
        {
            _WindowsMoveFlag = true;
            m_Dragpostion = e->globalPos() - this->pos();
        }
    }
}

void MainWindow::mouseMoveEvent(QMouseEvent* e)
{

    if(_WindowsMoveFlag)
    {
        move(e->globalPos() - m_Dragpostion );
    }
    m_MousePoint = e->pos();
}

void MainWindow::mouseReleaseEvent(QMouseEvent* e)
{
    if(e->button() == Qt::LeftButton )
    {
        _WindowsMoveFlag = false;
    }
}

void MainWindow::on_cb_FrameSize_currentIndexChanged(int index)
{
    QVariant FrameSizeIndex = ui->cb_FrameSize->itemData(index);
    sendCmdToDevicd(0x01,quint8(FrameSizeIndex.toInt()));
    _httpWidget->sendCMD(0x01,quint8(FrameSizeIndex.toInt()));
}

void MainWindow::on_bn_photo_pressed()
{
    QPixmap icon = _imagefullSize.scaled(_imagefullSize.width() / 5, _imagefullSize.height() / 5, Qt::IgnoreAspectRatio,Qt::SmoothTransformation);
    QDateTime current_date_time =QDateTime::currentDateTime();
    saveImage(_imagefullSize,current_date_time);
    QString time = current_date_time.toString("hh:mm:ss");
    QListWidgetItem* item = new QListWidgetItem(icon,time);
    item->setData(Qt::UserRole + 1,_imagefullSize);
    ui->listWidget->addItem(item);
}

void MainWindow::on_listWidget_itemDoubleClicked(QListWidgetItem *item)
{
    ImageDialog* dialog = new ImageDialog(this);
    item->data(Qt::UserRole + 1);

    QPixmap image = item->data(Qt::UserRole + 1).value<QPixmap>();
    qInfo("%d,%d",image.width(),image.height());
    dialog->showImage(image);
}
/*
void MainWindow::on_bn_h_mirror_clicked(bool checked)
{
    if( checked )
    {
        sendCmdToDevicd(11,0x01);
    }
    else
    {
        sendCmdToDevicd(11,0x00);
    }
}

void MainWindow::on_bn_v_flip_clicked(bool checked)
{
    if( checked )
    {
        sendCmdToDevicd(12,0x01);
    }
    else
    {
        sendCmdToDevicd(12,0x00);
    }
}
*/
void MainWindow::on_bn_savePath_pressed()
{
    QFileDialog::getExistingDirectory(this,"save","./");
}

void MainWindow::on_hs_Brightness_valueChanged(int value)
{
    sendCmdToDevicd(4,qint16(value));
}

void MainWindow::on_hs_Quality_valueChanged(int value)
{
    sendCmdToDevicd(2,qint16(value));
}

void MainWindow::on_hs_Contrast_valueChanged(int value)
{
    sendCmdToDevicd(3,qint16(value));
}

void MainWindow::on_hs_Saturation_valueChanged(int value)
{
    sendCmdToDevicd(5,qint16(value));
}

void MainWindow::on_hs_AELevel_valueChanged(int value)
{
    sendCmdToDevicd(24,qint16(value));
}

void MainWindow::on_hs_Gain_valueChanged(int value)
{
    sendCmdToDevicd(6,qint16(value));
}

void MainWindow::on_bn_openOther_pressed()
{
    _WindowsOpenFlag = !_WindowsOpenFlag;
    int width = 980;
    if( _WindowsOpenFlag == true )
    {
        width = 1230;
    }
    else
    {
        width = 980;
    }
    ui->bn_openOther->setProperty("isopen",_WindowsOpenFlag);
    ui->bn_openOther->style()->unpolish(ui->bn_openOther);
    this->resize(width,this->height());
}

void MainWindow::on_cb_connectMode_currentIndexChanged(int index)
{
    Q_UNUSED(index);
    int mode = ui->cb_connectMode->currentData().toInt();
    qInfo("Change Mode %d",mode);
    sendCmdToDevicd(26,qint16(mode),1);
    ui->tw_connect->setCurrentIndex(mode);

    //ui->lab_connectMode->setProperty("mode",mode);
    //ui->lab_connectMode->style()->unpolish(ui->lab_connectMode);
    //ui->lab_connectMode->repaint();
}
